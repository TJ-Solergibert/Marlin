run:
  name: Llama3-base
  create_marlin_callback: True

trainer:
  num_nodes: 1
  devices: 4
  accelerator: gpu
  precision: bf16
  logger: False
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: null
  max_steps: 10000
  log_every_n_steps: 1
  check_val_every_n_epoch: 999 # NOTE(tj.solergibert) Never run validation loop
  limit_val_batches: 0 # NOTE(tj.solergibert) Set at least 1 batch otherwise training will crash during init
  limit_test_batches: 0 # NOTE(tj.solergibert) Set at least 1 batch otherwise training will crash during init
  num_sanity_val_steps: 0
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0

exp_manager:
  explicit_log_dir: /tmp/log_dir
  name: ${run.name}
  create_wandb_logger: False
  create_tensorboard_logger: False
  log_global_rank_0_only: True
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  resume_from_checkpoint: null # NOTE(tj.solergibert) Set to resume training loading model weights, optimizer states and dataloader state
  create_preemption_callback: False
  create_checkpoint_callback: True
  checkpoint_callback_params:
    async_save: True
    every_n_train_steps: 1000
    always_save_nemo: False # NOTE(tj.solergibert) NEVER set this to True!
    save_nemo_on_train_end: False # NOTE(tj.solergibert) NEVER set this to True!
    dirpath: /tmp/checkpoints
    filename: ${exp_manager.name}-{global_step}-{consumed_samples} # NOTE(tj.solergibert) We need this naming convention to resume training properly
    model_parallel_size: ???
    every_n_epochs: null # NOTE(tj.solergibert) NeMo defaults to 1, but leads to `MisconfigurationException: Combination of parameters every_n_train_steps=1000, every_n_epochs=1 and train_time_interval=None should be mutually exclusive.`
    monitor: consumed_samples
    save_top_k: -1 # NOTE(tj.solergibert) Save ALL checkpoints
    save_last: False # NOTE(tj.solergibert) We don't need this Lightning config as we are manually selecting the most recent checkpoint
  log_tflops_per_sec_per_gpu: False
  log_step_timing: False
  step_timing_kwargs:
    sync_cuda: False
    buffer_size: 5
  seconds_to_sleep: 60

model:
  # ⚠️ WARNING ⚠️
  # The correct way to resume training loading the model weights, optimizer states & DataLoader states is by setting `exp_manager.resume_from_checkpoint`
  # The following two settings are used for continual training:
  restore_from_path: null # Set this to a .nemo file path to restore only the model weights.
  restore_from_ckpt: null # Set this to a training ckpt path to restore both model weights and optimizer states BUT without restoring the DataLoader states
  # NOTE(tj.solergibert) Doesn't skip consumed samples (Can't recover DataLoader states)
  # [1] https://github.com/NVIDIA/NeMo/blob/f2e665db97947f9d8508c14d60e064f12f74f754/nemo/collections/nlp/models/language_modeling/megatron_gpt_model.py#L345
  # [2] https://github.com/NVIDIA/NeMo/blob/f2e665db97947f9d8508c14d60e064f12f74f754/nemo/collections/nlp/models/language_modeling/megatron_gpt_model.py#L1771

  # Use GPTModel from megatron.core
  mcore_gpt: True

  # Specify micro_batch_size, global_batch_size, and model parallelism
  # Gradient accumulation will be done automatically based on data_parallel_size
  micro_batch_size: 1 # limited by GPU memory
  global_batch_size: 2048 # will use more micro batches to reach global batch size
  tensor_model_parallel_size: ???
  pipeline_model_parallel_size: ???
  virtual_pipeline_model_parallel_size: null # NOTE(tj.solergibert) Num layers = 80, (80 / pipeline_model_parallel_size) / 2 = 5 Layers per virtual pipeline stage
  context_parallel_size: ???

  # Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: False

  # Model architecture
  encoder_seq_length: 8192
  max_position_embeddings: ${model.encoder_seq_length}
  num_layers: ???
  hidden_size: ???
  ffn_hidden_size: ???
  num_attention_heads: ???
  num_query_groups: 8
  init_method_std: 0.01
  use_scaled_init_method: True
  attention_dropout: 0.0
  hidden_dropout: 0.0
  ffn_dropout: 0.0
  kv_channels: null
  apply_query_key_layer_scaling: True
  normalization: rmsnorm
  layernorm_epsilon: 1.0e-05
  do_layer_norm_weight_decay: False
  make_vocab_size_divisible_by: 128
  pre_process: True
  post_process: True
  bias: False
  activation: fast-swiglu
  headscale: False
  transformer_block_type: pre_ln
  openai_gelu: False
  normalize_attention_scores: True
  attention_type: multihead
  share_embeddings_and_output_weights: False
  position_embedding_type: rope
  rotary_base: 500000.0
  rotary_percentage: 1.0
  scale_positional_embedding: False
  tokenizer:
    library: huggingface
    type: ???
    use_fast: True

  # Mixed precision
  native_amp_init_scale: 4294967296
  native_amp_growth_interval: 1000
  hysteresis: 2
  fp32_residual_connection: False
  fp16_lm_cross_entropy: False

  # Megatron O2-style half-precision
  megatron_amp_O2: True # Enable O2-level automatic mixed precision using main parameters
  grad_allreduce_chunk_size_mb: 125

  # Fusion
  apply_rope_fusion: True
  bias_activation_fusion: True
  bias_dropout_add_fusion: True
  cross_entropy_loss_fusion: True
  gradient_accumulation_fusion: True # NOTE(tj.solergibert) https://github.com/NVIDIA/Megatron-LM/blob/01945b98d1ea3a2acb5e8301e181a328104f4856/megatron/core/tensor_parallel/layers.py#L41C5-L41C42 & https://github.com/NVIDIA/Megatron-LM/blob/01945b98d1ea3a2acb5e8301e181a328104f4856/megatron/core/tensor_parallel/layers.py#L575
  grad_div_ar_fusion: True
  masked_softmax_fusion: True
  persist_layer_norm: True

  # Pipeline parallel communication overlap
  overlap_p2p_comm: False
  batch_p2p_comm: False
  # Pipeline bubble overlap
  defer_embedding_wgrad_compute: False
  wgrad_deferral_limit: -1

  # Miscellaneous
  seed: 1234
  use_cpu_initialization: False
  onnx_safe: False
  apex_transformer_log_level: 30
  gradient_as_bucket_view: True
  sync_batch_comm: False
  deterministic_mode: False

  # Distributed checkpoint setup
  dist_ckpt_format: 'torch_dist' # Set to 'torch_dist' to use PyTorch distributed checkpoint format.
  dist_ckpt_load_on_device: True # Whether to load checkpoint weights directly on GPU or to CPU
  dist_ckpt_parallel_save: True
  dist_ckpt_assume_constant_structure: True # Set to True only if the state dict structure doesn't change within a single job. Allows caching some computation across checkpoint saves.
  dist_ckpt_parallel_dist_opt: True # Parallel save/load of a DistributedOptimizer.
  dist_ckpt_parallel_load: False # If true, each worker will load part of the dist checkpoint and exchange with NCCL. Might use some extra GPU memory
  dist_ckpt_torch_dist_multiproc: 2 # Number of extra processes per rank used during ckpt save with PyTorch distributed format

  # Transformer Engine
  transformer_engine: True
  fp8: False # enables fp8 in TransformerLayer forward
  fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: False # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0 # scaling margin
  fp8_interval: 1 # scaling update interval
  fp8_amax_history_len: 1024 # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: max # 'most_recent' or 'max'. Algorithm for computing amax from history
  ub_tp_comm_overlap: False
  use_flash_attention: True # Use flash attention in self-attention module, this config does nothing when transformer_engine=True

  # Interval of the host memory garbage collection. When it is zero, collectiion relies on the automatic garbage collector.
  # If an integer value larger than zero is set, collection is done manually by the batch step interval of `gc_interval`.
  # NOTE(tj.solergibert) Don't rely in automatic GC as it can lead to stragglers as every process will trigger GC at different steps
  # [1] https://github.com/pytorch/torchtitan/pull/148
  gc_interval: 5

  # Profilers
  nsys_profile: # NOTE(tj.solergibert) nsys profile -s none -o <profile filepath> -t cuda,nvtx --force-overwrite True --capture-range=cudaProfilerApi --capture-range-end=stop python ./examples/...
    enabled: False
    start_step: 12  # Global batch to start profiling
    end_step: 15 # Global batch to end profiling
    ranks: [0] # Global rank IDs to profile
    gen_shape: True # Generate model and kernel details including input shapes

  memory_profile:
    enabled: False # NOTE(tj.solergibert) Not working on Todi (RuntimeError: record_context_cpp is not support on non-linux non-x86_64 platforms)
    start_step: 10  # Global batch to start profiling
    end_step: 12 # Global batch to end profiling
    rank: 0 # Global rank ID to profile
    output_path: ${exp_manager.explicit_log_dir}/memory_trace_${run.name}.json # Path to store the profile output file


  ## Reset learning rate schedule.
  # 1. reset_lr=True, reset_lr_steps=False. When pre-training an existing checkpoint "from scratch" on a different dataset.
  # 2. reset_lr=True, reset_lr_steps=True. When continuing training from an existing checkpoint with the same configuration.
  #    Learning rate's max_steps and decay_steps will be recalculated as follows: max_steps -= completed_steps, decay_steps -= completed_steps where completed_steps is the number of steps already completed at the checkpoint.
  #    This will help to reach the min_lr value by the end of training without changing trainer.max_steps.
  reset_lr: False # Set to True to reset learning rate to initial learning rate. Only supported with distributed optimizer and megatron_amp_O2.
  reset_lr_steps: False # Set to True to adjust learning rate's max_steps and decay_steps by subtracting number of steps already completed at the checkpoint.

  # Optimizer
  optim:
    name: distributed_fused_adam
    lr: 0.00022
    weight_decay: 0.1
    betas:
    - 0.9
    - 0.95
    # ddp_bucket_size: null # NOTE(tj.solergibert) Using MCore default value https://github.com/NVIDIA/Megatron-LM/blob/2d7c521de7c5878501cf7e366e7d8e13267c8eb6/megatron/core/distributed/distributed_data_parallel_config.py#L38
    grad_sync_dtype: bf16
    param_sync_dtype: bf16
    overlap_grad_sync: True
    overlap_param_sync: True
    contiguous_grad_buffer: True
    contiguous_param_buffer: True
    sched:
      name: CosineAnnealing # NOTE(tj.solergibert) All available schedulers: https://github.com/NVIDIA/NeMo/blob/4c5f0510fc5ae5a384d67749abbd3f57db317a96/nemo/core/optim/lr_scheduler.py#L996-L1013
      warmup_steps: 50
      constant_steps: 10000
      min_lr: 0.0002199999

  # Data
  data:
    data_impl: mmap
    splits_string: 100,0,0
    seq_length: ${model.encoder_seq_length}
    skip_warmup: True
    num_workers: 2
    num_dataset_builder_threads: 1 # NOTE(tj.solergibert) Increase when having MANY .bin files
    pin_memory: False
    dataloader_type: single
    reset_position_ids: False
    reset_attention_mask: False
    eod_mask_loss: False
    index_mapping_dir: /tmp/dataset_cache # NOTE(tj.solergibert) Megatron's datasets `path_to_cache` dir
    data_prefix: ???
